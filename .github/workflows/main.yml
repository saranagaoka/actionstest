name: Create Tag and Set Topics

on:
  push:
    branches:
      - prod
      - dev

jobs:
  build:
    name: Create Tag and Set Topics
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Install GitHub CLI
        run: |
          curl -sSL https://github.com/cli/cli/releases/download/v2.4.0/gh_2.4.0_linux_amd64.tar.gz | sudo tar xz -C /usr/local/bin --strip-components=2 gh_2.4.0_linux_amd64/bin/gh

      - name: Login to GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: echo $GH_TOKEN | gh auth login --with-token

      - name: Set topics
        run: |
          gh repo edit saranagaoka/actiontest --add-topic sara
          gh repo edit saranagaoka/actiontest --add-topic saratest
          gh repo edit saranagaoka/actiontest --add-topic saracheck

      - name: Bump version and push tag
        id: create_tag
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          git fetch --all --tags
          TAG=$(git for-each-ref --sort=-creatordate --format '%(refname:short)' refs/tags | grep -E '^v[0-9]+\.[0-9]+$' | head -n1)

          if [[ -z "$TAG" ]]; then
            echo "No previous tags found. Starting with v1.0."
            echo "::set-output name=NEW_TAG::v1.0"
          else
            IFS='.' read -ra VERSION_PARTS <<< "${TAG:1}"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}

            case "${GITHUB_REF}" in
              'refs/heads/prod')
                MAJOR=$((MAJOR + 1))
                MINOR=0
                ;;
              'refs/heads/dev')
                MINOR=$((MINOR + 1))
                ;;
            esac

            NEW_TAG="v$MAJOR.$MINOR"
            echo "::set-output name=NEW_TAG::$NEW_TAG"
          fi

      - name: Get commit details
        id: get_commit
        run: |
          COMMIT_AUTHOR=$(git show -s --format='%an' HEAD)
          COMMIT_MESSAGE=$(git show -s --format='%s' HEAD)
          echo "::set-output name=COMMIT_AUTHOR::$COMMIT_AUTHOR"
          echo "::set-output name=COMMIT_MESSAGE::$COMMIT_MESSAGE"

      - name: Push tag
        run: |
          REMOTE_TAGS=$(git ls-remote --tags origin | awk -F'/' '{print $3}')
          if [[ "$REMOTE_TAGS" =~ "${{ steps.create_tag.outputs.NEW_TAG }}" ]]; then
            echo "Tag already exists. Not creating duplicate tag."
          else
            git config --global user.email "action@github.com"
            git config --global user.name "GitHub Action"
            TAG_MESSAGE="username: ${{ steps.get_commit.outputs.COMMIT_AUTHOR }}, message: ${{ steps.get_commit.outputs.COMMIT_MESSAGE }}"
            if [[ "${GITHUB_REF}" == 'refs/heads/prod' ]]; then
              git tag ${{ steps.create_tag.outputs.NEW_TAG }}
            else
              git tag -a ${{ steps.create_tag.outputs.NEW_TAG }} -m "$TAG_MESSAGE"
            fi
            git push origin ${{ steps.create_tag.outputs.NEW_TAG }}
